
use std::str::FromStr;

use super::ast::{Expr, Stmt, Op};

grammar;

pub Program: Vec<Stmt> = {
    Stmt*
}

Stmt: Stmt = {
    PrintStmt,
    AssignStmt,
}

PrintStmt: Stmt = {
    r"print" <expr:Expr?> ";" => Stmt::PrintStmt(expr)
}

AssignStmt: Stmt = {
    <target:Variable> "=" <assignee:Expr> ";"
        => Stmt::AssignStmt{ target, assignee }
}

pub Expr: Box<Expr> = {
    <left:Expr> <operator:AdditionOp> <right:Factor>
        => Box::new(Expr::BinaryOp{left, operator, right}),
    Factor,
}

AdditionOp: Op = {
    "+" => Op::Add,
    "-" => Op::Sub,
}

Factor: Box<Expr> = {
    <left: Factor> <operator:MulOp> <right: UnaryNeg>
        => Box::new(Expr::BinaryOp{left, operator, right}),
    UnaryNeg,
}

MulOp: Op = {
    "*" => Op::Mul,
    "/" => Op::Div,
}



UnaryNeg:Box<Expr> = {
    <operator: "-"> <operand: Term> => Box::new(Expr::UnaryOp{
                    operator: Op::Sub,
                    operand
                }),
    Term,
}

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Variable => Box::new(Expr::Variable(<>)),
    "(" <Expr> ")"
}

Num: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
}

Variable: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string()
}

match {
    r"print"
}else{
    r"[_a-zA-Z][_a-zA-Z0-9]*",
    _
}